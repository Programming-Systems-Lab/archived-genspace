/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RosterPanel.java
 *
 * Created on Jul 11, 2009, 2:21:49 PM
 */

package org.geworkbench.components.genspace.ui.chat;

import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;

import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;

import org.geworkbench.components.genspace.chat.ChatReceiver;
import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.RosterEntry;
import org.jivesoftware.smack.RosterListener;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.packet.Presence.Mode;
import org.jivesoftware.smack.packet.Presence.Type;

/**
 * The rosterpanel actually contains the roster, as the rosterframe also contains
 * some other stuff
 * @author jsb2125
 */
public class RosterPanel extends javax.swing.JPanel implements RosterListener{


	private static final long serialVersionUID = 2226250356489598594L;
	/**
	 * We need a new listmodel to reprsent the roster. It formats the elements
	 * for both tooltips and the buddy list
	 * @author jon
	 *
	 */
	private class RosterModel extends AbstractListModel
	{
		private static final long serialVersionUID = 4493935174712537878L;
		private HashMap<String, RosterEntry> entries;
		private ArrayList<String> keys;
		public RosterModel()
		{
			clear();
		}
		public void clear()
		{
			entries = new HashMap<String, RosterEntry>();
			keys = new ArrayList<String>();
		}
		public void add(RosterEntry e)
		{
			keys.add(e.getUser());
			entries.put(e.getUser(), e);
		}
		public RosterEntry getEntry(int index)
		{
			return entries.get(keys.get(index));
		}
		public String getStatusAt(int index)
		{
			Presence p = roster.getPresence(keys.get(index));
			if(p.getStatus() == null)
			{
				return p.getType().toString();
			}
			else
			{
				return p.getStatus();
			}
		}
		public Object getElementAt(int index) {
			//System.out.println(keys.get(index));
			//System.out.println(roster.getPresence(keys.get(index)));
			String color = "black";
			Presence p = roster.getPresence(keys.get(index));
			if(p.getType().equals(Presence.Type.unavailable))
			{
				//User is unavailable
				color = "#9DA09F";
			}
			else
			{
				if(p.getMode() != null && (p.getMode().equals(Mode.away) || p.getMode().equals(Mode.dnd)))
					color = "#9A0000";
				else
					color= "#2C7700";
			}
			return "<html><body><font color=\""+color+"\"><b>"+entries.get(keys.get(index)).getName() + "</b></font></body></html>";

		}
		public int getSize() {
			return keys.size();
		}	
	}
	Roster roster;
	
	public void entriesAdded(Collection<String> r) {}

	public void entriesDeleted(Collection<String> r) {}

	public void entriesUpdated(Collection<String> r) {}

	public void presenceChanged(Presence p) {
		lstRoster.repaint();
		System.out.println("Presence change");
	}
	
    /** Creates new form RosterPanel */
    public RosterPanel() {
        initComponents();
    }

    private void lstRosterMouseClicked(java.awt.event.MouseEvent evt) {
        if(evt.getClickCount() == 2)
        {
        	//Want to chat with this person
        	Chat c = ChatReceiver.manager.createChat(((RosterModel)(lstRoster.getModel())).getEntry(lstRoster.getSelectedIndex()).getUser(), null);
        	lstRoster.clearSelection();
        }
    }
    
    public void setRoster(Roster newRoster)
	{
    	roster = newRoster;
    	roster.addRosterListener(this);
    	RosterModel model = new RosterModel();
		for(RosterEntry e : roster.getEntries())
		{
			model.add(e);
		}
		lstRoster.setModel(model);
	}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstRoster = new javax.swing.JList(){
        	@Override
        	public String getToolTipText(MouseEvent event) {
        		 int index = locationToIndex(event.getPoint());
        		 if(getCellBounds(index, index).contains(event.getPoint()))
        		 {
	        		 RosterModel model = (RosterModel) getModel();
	
	                 return "Status: " + model.getStatusAt(index);
        		 }
        		 else
        			 return null;
        	}
        	
        };

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

 

        lstRoster.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstRoster.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstRosterMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstRoster);

        jScrollPane3.setViewportView(jScrollPane1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 158, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 337, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>




    // Variables declaration - do not modify
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList lstRoster;
    // End of variables declaration



}

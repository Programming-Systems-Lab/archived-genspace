package genspace.db;

import genspace.common.Logger;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.geworkbench.components.genspace.bean.RegisterBean;

import sun.misc.BASE64Encoder;

public class RegistrationServerManager extends DatabaseManager {

	/**
	 * This method is used to encrypt the password using SHA encryption.
	 * 
	 * @param password
	 *            represents the password to be encrypted
	 * @return returns password in encrypted form
	 */
	private static String getEncryptPassword(char[] c_password) {
		String password = new String(c_password);
		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("SHA-1");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		try {
			md.update(password.getBytes("UTF-8"));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return (new BASE64Encoder()).encode(md.digest());
	}

	/**
	 * This method is used to register a user
	 * 
	 * @param reg
	 *            represents the object of RegisterBean
	 * @return returns true on successful registration else returns false
	 */
	public boolean register(RegisterBean reg) {
		try {
			// get a database connection
			con = getConnection();

			if (con != null) {
				// create a Statement
				PreparedStatement stmt = null;

				String query = "INSERT INTO registration VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				stmt = con.prepareStatement(query);
				stmt.setString(1, reg.getUsername());
				stmt.setString(2, getEncryptPassword(reg.getPassword()));
				stmt.setString(3, reg.getEmail());
				stmt.setString(4, reg.getIMEmail());
				stmt.setString(5, reg.getIMPasswd());
				stmt.setString(6, reg.getFName());
				stmt.setString(7, reg.getLName());
				stmt.setString(8, reg.getWorkTitle());
				stmt.setString(9, reg.getPhoneNumber());
				stmt.setString(10, reg.getLabAffliation());
				stmt.setString(11, reg.getAddr1());
				stmt.setString(12, reg.getAddr2());
				stmt.setString(13, reg.getCity());
				stmt.setString(14, reg.getState());
				stmt.setString(15, reg.getZipCode());
				stmt = con.prepareStatement(query);
				stmt.executeUpdate();

				// this query sets the default data visibilty of new user as 1
				// ie. data visible within network.
				query = "INSERT INTO data_visibility VALUES (?,1,1)";
				stmt = con.prepareStatement(query);
				stmt.setString(1, reg.getUsername());
				stmt.executeUpdate();

				// this query sets the default user visibilty of new user as 1
				// ie. user visible within network.
				query = "INSERT INTO user_visibility VALUES (?,1)";
				stmt = con.prepareStatement(query);
				stmt.setString(1, reg.getUsername());
				stmt.executeUpdate();

			} else
				System.out.println("Error: No active Connection");
		} catch (Exception e) {
			e.printStackTrace();
			if (Logger.isLogError())
				Logger.logError(e);
			return false;
		} finally {
			closeConnection();
		}

		return true;
	}

	/**
	 * This method is used to validate user's login information. It encrypts the
	 * password and comapres the encrypted password with the one stored in the
	 * database against the username specified.
	 * 
	 * @param username
	 *            represents username
	 * @param password
	 *            represents password
	 * @return returns true if user validated successfully else returns false
	 */
	public boolean login(RegisterBean reg) {

		try {
			// get a database connection
			con = getConnection();

			if (con != null) {
				// create a Statement

				String encryptedPassword = null;
				String query = "SELECT password FROM registration where username = ?";
				PreparedStatement stmt = con.prepareStatement(query);
				stmt.setString(1, reg.getUsername());
				ResultSet rs = stmt.executeQuery();

				if (rs.next()) {
					encryptedPassword = rs.getString("password");
				} else {
					// no user with this username exists
					return false;
				}

				if (encryptedPassword.equals(getEncryptPassword(reg
						.getPassword()))) {
					// password matches
					return true;
				} else {
					return false;
				}

			} else
				System.out.println("Error: No active Connection");
		} catch (Exception e) {
			e.printStackTrace();
			if (Logger.isLogError())
				Logger.logError(e);
			return false;
		} finally {
			closeConnection();
		}

		return false;
	}

	public boolean userDupCheck(RegisterBean reg) {

		try {
			// get a database connection
			con = getConnection();

			if (con != null) {

				String query = "SELECT username FROM registration where username = ?";
				PreparedStatement stmt = con.prepareStatement(query);
				stmt.setString(1, reg.getUsername());
				ResultSet rs = stmt.executeQuery();

				if (rs.next()) {
					return false;
				} else {
					// no user with this username exists
					return true;
				}

			} else
				System.out.println("Error: No active Connection");
		} catch (Exception e) {
			e.printStackTrace();
			if (Logger.isLogError())
				Logger.logError(e);
			return false;
		} finally {
			closeConnection();
		}

		return false;
	}
	
	public static void main(String args[]){
		System.out.println(getEncryptPassword("12345".toCharArray()));
	}
}
